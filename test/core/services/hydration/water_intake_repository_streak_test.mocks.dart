// Mocks generated by Mockito 5.4.4 from annotations
// in water_mind/test/core/services/hydration/water_intake_repository_streak_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:riverpod/src/internals.dart' as _i5;
import 'package:water_mind/src/core/database/daos/water_intake_dao.dart' as _i7;
import 'package:water_mind/src/core/database/database.dart' as _i2;
import 'package:water_mind/src/core/models/daily_water_summary.dart' as _i6;
import 'package:water_mind/src/core/models/user_streak_model.dart' as _i10;
import 'package:water_mind/src/core/models/water_intake_entry.dart' as _i4;
import 'package:water_mind/src/core/models/water_intake_history.dart' as _i3;
import 'package:water_mind/src/core/services/hydration/daily_water_summary_repository.dart'
    as _i12;
import 'package:water_mind/src/core/services/streak/streak_service.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWaterIntakeHistoryTableCompanion_0 extends _i1.SmartFake
    implements _i2.WaterIntakeHistoryTableCompanion {
  _FakeWaterIntakeHistoryTableCompanion_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWaterIntakeHistory_1 extends _i1.SmartFake
    implements _i3.WaterIntakeHistory {
  _FakeWaterIntakeHistory_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWaterIntakeEntryTableCompanion_2 extends _i1.SmartFake
    implements _i2.WaterIntakeEntryTableCompanion {
  _FakeWaterIntakeEntryTableCompanion_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWaterIntakeEntry_3 extends _i1.SmartFake
    implements _i4.WaterIntakeEntry {
  _FakeWaterIntakeEntry_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderContainer_4 extends _i1.SmartFake
    implements _i5.ProviderContainer {
  _FakeProviderContainer_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeepAliveLink_5 extends _i1.SmartFake implements _i5.KeepAliveLink {
  _FakeKeepAliveLink_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderSubscription_6<State1> extends _i1.SmartFake
    implements _i5.ProviderSubscription<State1> {
  _FakeProviderSubscription_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDailyWaterSummary_7 extends _i1.SmartFake
    implements _i6.DailyWaterSummary {
  _FakeDailyWaterSummary_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WaterIntakeDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockWaterIntakeDao extends _i1.Mock implements _i7.WaterIntakeDao {
  MockWaterIntakeDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WaterIntakeHistoryTableCompanion historyToCompanion(
          _i3.WaterIntakeHistory? history) =>
      (super.noSuchMethod(
        Invocation.method(
          #historyToCompanion,
          [history],
        ),
        returnValue: _FakeWaterIntakeHistoryTableCompanion_0(
          this,
          Invocation.method(
            #historyToCompanion,
            [history],
          ),
        ),
      ) as _i2.WaterIntakeHistoryTableCompanion);

  @override
  _i8.Future<_i3.WaterIntakeHistory> historyFromData(
          _i2.WaterIntakeHistoryTableData? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #historyFromData,
          [data],
        ),
        returnValue:
            _i8.Future<_i3.WaterIntakeHistory>.value(_FakeWaterIntakeHistory_1(
          this,
          Invocation.method(
            #historyFromData,
            [data],
          ),
        )),
      ) as _i8.Future<_i3.WaterIntakeHistory>);

  @override
  _i2.WaterIntakeEntryTableCompanion entryToCompanion(
    String? historyId,
    _i4.WaterIntakeEntry? entry,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #entryToCompanion,
          [
            historyId,
            entry,
          ],
        ),
        returnValue: _FakeWaterIntakeEntryTableCompanion_2(
          this,
          Invocation.method(
            #entryToCompanion,
            [
              historyId,
              entry,
            ],
          ),
        ),
      ) as _i2.WaterIntakeEntryTableCompanion);

  @override
  _i8.Future<_i4.WaterIntakeEntry> entryFromData(
          _i2.WaterIntakeEntryTableData? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #entryFromData,
          [data],
        ),
        returnValue:
            _i8.Future<_i4.WaterIntakeEntry>.value(_FakeWaterIntakeEntry_3(
          this,
          Invocation.method(
            #entryFromData,
            [data],
          ),
        )),
      ) as _i8.Future<_i4.WaterIntakeEntry>);

  @override
  _i8.Future<_i3.WaterIntakeHistory?> getWaterIntakeHistory(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWaterIntakeHistory,
          [date],
        ),
        returnValue: _i8.Future<_i3.WaterIntakeHistory?>.value(),
      ) as _i8.Future<_i3.WaterIntakeHistory?>);

  @override
  _i8.Future<void> saveWaterIntakeHistory(_i3.WaterIntakeHistory? history) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWaterIntakeHistory,
          [history],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i3.WaterIntakeHistory> addWaterIntakeEntry(
    DateTime? date,
    _i4.WaterIntakeEntry? entry,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addWaterIntakeEntry,
          [
            date,
            entry,
          ],
        ),
        returnValue:
            _i8.Future<_i3.WaterIntakeHistory>.value(_FakeWaterIntakeHistory_1(
          this,
          Invocation.method(
            #addWaterIntakeEntry,
            [
              date,
              entry,
            ],
          ),
        )),
      ) as _i8.Future<_i3.WaterIntakeHistory>);

  @override
  _i8.Future<void> deleteWaterIntakeEntry(
    DateTime? date,
    String? entryId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteWaterIntakeEntry,
          [
            date,
            entryId,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<List<_i3.WaterIntakeHistory>> getAllWaterIntakeHistory({
    int? limit,
    int? offset,
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllWaterIntakeHistory,
          [],
          {
            #limit: limit,
            #offset: offset,
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i8.Future<List<_i3.WaterIntakeHistory>>.value(
            <_i3.WaterIntakeHistory>[]),
      ) as _i8.Future<List<_i3.WaterIntakeHistory>>);

  @override
  _i8.Future<void> clearAllWaterIntakeHistory() => (super.noSuchMethod(
        Invocation.method(
          #clearAllWaterIntakeHistory,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> deleteWaterIntakeHistoryOlderThan(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteWaterIntakeHistoryOlderThan,
          [date],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [StreakService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreakService extends _i1.Mock implements _i9.StreakService {
  MockStreakService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i10.UserStreakModel?> getUserStreak() => (super.noSuchMethod(
        Invocation.method(
          #getUserStreak,
          [],
        ),
        returnValue: _i8.Future<_i10.UserStreakModel?>.value(),
      ) as _i8.Future<_i10.UserStreakModel?>);

  @override
  _i8.Future<void> updateUserStreak(DateTime? activityDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserStreak,
          [activityDate],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<bool> hasStreakToday() => (super.noSuchMethod(
        Invocation.method(
          #hasStreakToday,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}

/// A class which mocks [Ref].
///
/// See the documentation for Mockito's code generation for more information.
class MockRef<State extends Object?> extends _i1.Mock
    implements _i5.Ref<State> {
  MockRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProviderContainer get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeProviderContainer_4(
          this,
          Invocation.getter(#container),
        ),
      ) as _i5.ProviderContainer);

  @override
  T refresh<T>(_i5.Refreshable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [provider],
        ),
        returnValue: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
      ) as T);

  @override
  void invalidate(_i5.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [provider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      State?,
      State,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void invalidateSelf() => super.noSuchMethod(
        Invocation.method(
          #invalidateSelf,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAddListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onAddListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onRemoveListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onCancel(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onCancel,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T read<T>(_i5.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [provider],
        ),
        returnValue: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
      ) as T);

  @override
  bool exists(_i5.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [provider],
        ),
        returnValue: false,
      ) as bool);

  @override
  T watch<T>(_i5.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [provider],
        ),
        returnValue: _i11.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
      ) as T);

  @override
  _i5.KeepAliveLink keepAlive() => (super.noSuchMethod(
        Invocation.method(
          #keepAlive,
          [],
        ),
        returnValue: _FakeKeepAliveLink_5(
          this,
          Invocation.method(
            #keepAlive,
            [],
          ),
        ),
      ) as _i5.KeepAliveLink);

  @override
  _i5.ProviderSubscription<T> listen<T>(
    _i5.ProviderListenable<T>? provider,
    void Function(
      T?,
      T,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [
            provider,
            listener,
          ],
          {
            #onError: onError,
            #fireImmediately: fireImmediately,
          },
        ),
        returnValue: _FakeProviderSubscription_6<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
      ) as _i5.ProviderSubscription<T>);
}

/// A class which mocks [DailyWaterSummaryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDailyWaterSummaryRepository extends _i1.Mock
    implements _i12.DailyWaterSummaryRepository {
  MockDailyWaterSummaryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.DailyWaterSummary?> getDailyWaterSummary(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDailyWaterSummary,
          [date],
        ),
        returnValue: _i8.Future<_i6.DailyWaterSummary?>.value(),
      ) as _i8.Future<_i6.DailyWaterSummary?>);

  @override
  _i8.Future<void> saveDailyWaterSummary(_i6.DailyWaterSummary? summary) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveDailyWaterSummary,
          [summary],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i6.DailyWaterSummary> updateFromWaterIntakeHistory(
          _i3.WaterIntakeHistory? history) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFromWaterIntakeHistory,
          [history],
        ),
        returnValue:
            _i8.Future<_i6.DailyWaterSummary>.value(_FakeDailyWaterSummary_7(
          this,
          Invocation.method(
            #updateFromWaterIntakeHistory,
            [history],
          ),
        )),
      ) as _i8.Future<_i6.DailyWaterSummary>);

  @override
  _i8.Future<List<_i6.DailyWaterSummary>> getAllDailyWaterSummaries({
    int? limit,
    int? offset,
    DateTime? startDate,
    DateTime? endDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllDailyWaterSummaries,
          [],
          {
            #limit: limit,
            #offset: offset,
            #startDate: startDate,
            #endDate: endDate,
          },
        ),
        returnValue: _i8.Future<List<_i6.DailyWaterSummary>>.value(
            <_i6.DailyWaterSummary>[]),
      ) as _i8.Future<List<_i6.DailyWaterSummary>>);

  @override
  _i8.Future<void> clearAllDailyWaterSummaries() => (super.noSuchMethod(
        Invocation.method(
          #clearAllDailyWaterSummaries,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
