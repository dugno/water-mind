// Mocks generated by Mockito 5.4.4 from annotations
// in water_mind/test/core/services/streak/streak_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:water_mind/src/core/database/daos/user_streak_dao.dart' as _i4;
import 'package:water_mind/src/core/database/database.dart' as _i2;
import 'package:water_mind/src/core/models/user_streak_model.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserStreakTableCompanion_0 extends _i1.SmartFake
    implements _i2.UserStreakTableCompanion {
  _FakeUserStreakTableCompanion_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserStreakModel_1 extends _i1.SmartFake
    implements _i3.UserStreakModel {
  _FakeUserStreakModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserStreakDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserStreakDao extends _i1.Mock implements _i4.UserStreakDao {
  MockUserStreakDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserStreakTableCompanion modelToCompanion(_i3.UserStreakModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #modelToCompanion,
          [model],
        ),
        returnValue: _FakeUserStreakTableCompanion_0(
          this,
          Invocation.method(
            #modelToCompanion,
            [model],
          ),
        ),
      ) as _i2.UserStreakTableCompanion);

  @override
  _i3.UserStreakModel dataToModel(_i2.UserStreakTableData? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #dataToModel,
          [data],
        ),
        returnValue: _FakeUserStreakModel_1(
          this,
          Invocation.method(
            #dataToModel,
            [data],
          ),
        ),
      ) as _i3.UserStreakModel);

  @override
  _i5.Future<_i3.UserStreakModel?> getUserStreak() => (super.noSuchMethod(
        Invocation.method(
          #getUserStreak,
          [],
        ),
        returnValue: _i5.Future<_i3.UserStreakModel?>.value(),
      ) as _i5.Future<_i3.UserStreakModel?>);

  @override
  _i5.Future<void> saveUserStreak(_i3.UserStreakModel? streak) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveUserStreak,
          [streak],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateUserStreak(DateTime? activityDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserStreak,
          [activityDate],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
